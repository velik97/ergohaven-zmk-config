#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q          &kp W         &kp E        &kp R          &kp T                          &kp Y  &kp U        &kp I        &kp O         &kp P
  &hml LSHIFT A  &hml LCTRL S  &hml LALT D  &hml LGUI F    &kp G                          &kp H  &hmr RGUI J  &hmr RALT K  &hmr RCTRL L  &hmr RSHIFT SEMICOLON
  &kp Z          &kp X         &kp C        &kp V          &kp B                          &kp N  &kp M        &kp COMMA    &kp DOT       &kp SQT
                                            &kp BACKSPACE  &mo 2  &kp SPACE    &kp ENTER  &mo 1  &kp TAB
            >;
        };

        nav {
            bindings = <
  &kp N1      &kp N2     &kp N3    &kp N4    &kp N5                        &kp N6           &kp N7               &kp N8        &kp N9            &kp N0
  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI  &kp ENTER                     &kp PRINTSCREEN  &hmr RGUI PAGE_DOWN  &hmr RALT UP  &hmr RCTRL PG_UP  &kp LSHIFT
  &kp ESC     &kp HOME   &kp INS   &kp END   &kp DELETE                    &kp CAPS         &kp LEFT             &kp DOWN      &kp RIGHT         &none
                                   &trans    &mo 3       &trans    &trans  &trans           &trans
            >;
        };

        sym {
            bindings = <
  &none             &kp LT           &kp EQUAL        &kp GT          &kp GRAVE                    &kp CARET  &kp LBKT        &kp UNDER       &kp RBKT         &none
  &hml LSHIFT BSLH  &hml LCTRL LPAR  &hml LALT MINUS  &hml LGUI RPAR  &kp PLUS                     &kp PRCNT  &hmr RGUI LBRC  &hmr RALT SEMI  &hmr RCTRL RBRC  &hmr RSHIFT EXCL
  &kp HASH          &kp STAR         &kp COLON        &kp FSLH        &none                        &none      &kp PIPE        &kp TILDE       &kp AMPS         &kp DLLR
                                                      &trans          &trans     &trans    &trans  &mo 3      &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1         &kp F2        &kp F3        &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1        &bt BT_SEL 2      &bt BT_SEL 3         &bt BT_CLR
  &kp RSHIFT   &hml RCTRL F5  &hml RALT F6  &hml RGUI F7  &kp F8                     &out OUT_BLE  &hmr RGUI C_VOL_DN  &hmr RALT C_MUTE  &hmr RCTRL C_VOL_UP  &kp RSHIFT
  &none        &kp F9         &kp F10       &kp F11       &kp F12                    &out OUT_USB  &kp C_PREV          &kp C_PP          &kp C_NEXT           &studio_unlock
                                            &trans        &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
